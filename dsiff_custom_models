{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dasiff/Clean-Input/blob/master/dsiff_custom_models\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "99c1c807",
      "metadata": {
        "id": "99c1c807"
      },
      "outputs": [],
      "source": [
        "from torchvision.transforms import (\n",
        "    Compose,\n",
        "    ToTensor,\n",
        "    RandomHorizontalFlip,\n",
        "    RandomVerticalFlip,\n",
        "    Resize,\n",
        "    Normalize,\n",
        ")\n",
        "import random\n",
        "\n",
        "import torch\n",
        "import torch.optim as optim\n",
        "import torch.nn as nn\n",
        "\n",
        "from torchvision.transforms import functional as TF\n",
        "import torch.nn.functional as F\n",
        "from torchvision.datasets import ImageFolder\n",
        "from torch.utils.data import DataLoader, Dataset\n",
        "from skin_cancer_cnn import SkinCancerCNN\n",
        "from classification_model import ClassificationModelBuilding\n",
        "from torch_lr_finder import LRFinder\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "41edb965",
      "metadata": {
        "id": "41edb965"
      },
      "outputs": [],
      "source": [
        "# First check the dimensions of the images\n",
        "# from PIL import Image\n",
        "# from pathlib import Path\n",
        "\n",
        "# widths, heights = [], []\n",
        "\n",
        "# for img_path in Path(r\"G:\\My Drive\\CS7643 Project\\skin_cancer_train\\malignant\").glob(\n",
        "#     \"*.jpg\"\n",
        "# ):\n",
        "#     with Image.open(img_path) as img:\n",
        "#         w, h = img.size\n",
        "#         widths.append(w)\n",
        "#         heights.append(h)\n",
        "\n",
        "\n",
        "# print(f\"Width: min={min(widths)}, max={max(widths)}, medium={np.mean(widths)}\")\n",
        "# print(f\"Height: min={min(heights)}, max={max(heights)}, medium={np.mean(heights)}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "324c0095",
      "metadata": {
        "id": "324c0095"
      },
      "outputs": [],
      "source": [
        "class RandomRightRotation:\n",
        "    def __init__(self, angles=[0, 90, 180, 270]):\n",
        "        self.angles = angles\n",
        "\n",
        "    def __call__(self, img):\n",
        "        angle = random.choice(self.angles)\n",
        "        return TF.rotate(img, angle)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f7f4ea59",
      "metadata": {
        "id": "f7f4ea59"
      },
      "outputs": [],
      "source": [
        "train_root_dir = \"C:/Users/steve/CS_7643/skin_cancer_train\"\n",
        "val_root_dir = \"C:/Users/steve/CS_7643/skin_cancer_val\"\n",
        "\n",
        "temp_transform = Compose([Resize(128), ToTensor()])\n",
        "temp_dataset = ImageFolder(root=train_root_dir, transform=temp_transform)\n",
        "temp_loader = DataLoader(temp_dataset, batch_size=32)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9c96a27d",
      "metadata": {
        "id": "9c96a27d",
        "outputId": "940db45b-72c9-4e89-d1a4-d99e35eb8920"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'benign': 9706, 'malignant': 294}"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import os\n",
        "import fnmatch\n",
        "\n",
        "class_counts = {}\n",
        "\n",
        "for class_name in os.listdir(train_root_dir):\n",
        "    class_path = os.path.join(train_root_dir, class_name)\n",
        "    if os.path.isdir(class_path):\n",
        "        num_jpgs = len(fnmatch.filter(os.listdir(class_path), \"*.jpg\"))\n",
        "        class_counts[class_name] = num_jpgs\n",
        "\n",
        "class_counts"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dc31529e",
      "metadata": {
        "id": "dc31529e"
      },
      "outputs": [],
      "source": [
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "\n",
        "total_test_samples = sum(class_counts.values())\n",
        "malignant_weight = class_counts[\"benign\"] / class_counts[\"malignant\"]\n",
        "pos_weight = torch.tensor(malignant_weight, dtype=torch.float32).to(device)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5691b51d",
      "metadata": {
        "id": "5691b51d",
        "outputId": "89eb8fa6-3434-42e3-9317-11d821c43f27"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mean: tensor([0.6934, 0.5232, 0.4381])\n",
            "Std: tensor([0.1298, 0.1255, 0.1216])\n"
          ]
        }
      ],
      "source": [
        "# Compute mean and std of train set\n",
        "n_pixels = 0\n",
        "channel_sum = torch.zeros(3)\n",
        "channel_squared_sum = torch.zeros(3)\n",
        "\n",
        "for images, _ in temp_loader:\n",
        "    n_pixels += images.numel() / 3  # Get total pixels per channel\n",
        "    channel_sum += images.sum(dim=[0, 2, 3])  # Sum over batch, height, width\n",
        "    channel_squared_sum += (images**2).sum(dim=[0, 2, 3])\n",
        "\n",
        "mean = channel_sum / n_pixels\n",
        "std = (channel_squared_sum / n_pixels - mean**2).sqrt()\n",
        "print(f\"Mean: {mean}\")\n",
        "print(f\"Std: {std}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e84d7f66",
      "metadata": {
        "id": "e84d7f66"
      },
      "outputs": [],
      "source": [
        "pos_data_transform = Compose(\n",
        "    [\n",
        "        Resize(128),\n",
        "        ToTensor(),\n",
        "        Normalize(mean, std),\n",
        "        RandomHorizontalFlip(p=0.5),\n",
        "        RandomVerticalFlip(p=0.5),\n",
        "        RandomRightRotation(angles=[90, 180, 270]),\n",
        "    ]\n",
        ")\n",
        "base_transform = Compose([Resize(128), ToTensor(), Normalize(mean, std)])\n",
        "\n",
        "\n",
        "raw_train = ImageFolder(root=train_root_dir, transform=None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "06f5d5b9",
      "metadata": {
        "id": "06f5d5b9"
      },
      "outputs": [],
      "source": [
        "class ConditionalAugDataset(Dataset):\n",
        "    def __init__(self, base_dataset, pos_transform, base_transform):\n",
        "        self.dataset = base_dataset\n",
        "        self.pos_transform = pos_transform\n",
        "        self.base_transform = base_transform\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.dataset)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        img, label = self.dataset[idx]\n",
        "\n",
        "        if label == 1:\n",
        "            img = self.pos_transform(img)\n",
        "        else:\n",
        "            img = self.base_transform(img)\n",
        "        return img, label"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7927cec7",
      "metadata": {
        "id": "7927cec7"
      },
      "outputs": [],
      "source": [
        "train_dataset = ConditionalAugDataset(raw_train, pos_data_transform, base_transform)\n",
        "val_dataset = ImageFolder(root=val_root_dir, transform=base_transform)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=32)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5b08f01a",
      "metadata": {
        "id": "5b08f01a"
      },
      "outputs": [],
      "source": [
        "torch.manual_seed(13)\n",
        "model = SkinCancerCNN(p=0.5)\n",
        "loss_fn = nn.BCEWithLogitsLoss(pos_weight=pos_weight)\n",
        "optimizer = optim.AdamW(model.parameters(), lr=2e-4)\n",
        "\n",
        "built_model = ClassificationModelBuilding(\n",
        "    model, loss_fn, optimizer, train_loader, val_loader\n",
        ")\n",
        "built_model.fit(epochs=10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b21773b4",
      "metadata": {
        "id": "b21773b4",
        "outputId": "34ce6cfb-6918-4b0c-ef52-6d18c353b31c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig = built_model.plot_losses()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2663116b",
      "metadata": {
        "id": "2663116b",
        "outputId": "8841644c-9012-4171-e507-efc2313c647e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>threshold</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>precision</th>\n",
              "      <th>recall</th>\n",
              "      <th>F1 score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.2</td>\n",
              "      <td>0.468</td>\n",
              "      <td>0.141234</td>\n",
              "      <td>0.966667</td>\n",
              "      <td>0.246459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.3</td>\n",
              "      <td>0.658</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>0.933333</td>\n",
              "      <td>0.329412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.4</td>\n",
              "      <td>0.778</td>\n",
              "      <td>0.278523</td>\n",
              "      <td>0.922222</td>\n",
              "      <td>0.427835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.5</td>\n",
              "      <td>0.855</td>\n",
              "      <td>0.370892</td>\n",
              "      <td>0.877778</td>\n",
              "      <td>0.521452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.6</td>\n",
              "      <td>0.888</td>\n",
              "      <td>0.435294</td>\n",
              "      <td>0.822222</td>\n",
              "      <td>0.569231</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.7</td>\n",
              "      <td>0.908</td>\n",
              "      <td>0.492424</td>\n",
              "      <td>0.722222</td>\n",
              "      <td>0.585586</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.8</td>\n",
              "      <td>0.917</td>\n",
              "      <td>0.538462</td>\n",
              "      <td>0.544444</td>\n",
              "      <td>0.541436</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   threshold  accuracy  precision    recall  F1 score\n",
              "0        0.2     0.468   0.141234  0.966667  0.246459\n",
              "1        0.3     0.658   0.200000  0.933333  0.329412\n",
              "2        0.4     0.778   0.278523  0.922222  0.427835\n",
              "3        0.5     0.855   0.370892  0.877778  0.521452\n",
              "4        0.6     0.888   0.435294  0.822222  0.569231\n",
              "5        0.7     0.908   0.492424  0.722222  0.585586\n",
              "6        0.8     0.917   0.538462  0.544444  0.541436"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "val_preds = []\n",
        "true_labels = []\n",
        "\n",
        "for x_batch, y_batch in val_loader:\n",
        "    preds = built_model.predict(x_batch)\n",
        "    true_labels.extend(y_batch)\n",
        "    val_preds.extend(preds)\n",
        "\n",
        "val_preds = np.array(val_preds)\n",
        "\n",
        "thresholds = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n",
        "\n",
        "results = []\n",
        "\n",
        "for threshold in thresholds:\n",
        "    pred = (val_preds >= threshold).astype(int)\n",
        "\n",
        "    acc = accuracy_score(true_labels, pred)\n",
        "    precision = precision_score(true_labels, pred)\n",
        "    recall = recall_score(true_labels, pred)\n",
        "    f1 = f1_score(true_labels, pred)\n",
        "\n",
        "    results.append(\n",
        "        {\n",
        "            \"threshold\": threshold,\n",
        "            \"accuracy\": acc,\n",
        "            \"precision\": precision,\n",
        "            \"recall\": recall,\n",
        "            \"F1 score\": f1,\n",
        "        }\n",
        "    )\n",
        "\n",
        "df_result = pd.DataFrame(results)\n",
        "df_result.sort_values(by=\"recall\", ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e20791cc",
      "metadata": {
        "id": "e20791cc",
        "outputId": "c01520d2-254a-4730-8ed8-da8070cf8b4d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy is 0.8780\n",
            "Precision is 0.4048\n",
            "Recall is 0.7556\n",
            "F1 score is 0.5271\n"
          ]
        }
      ],
      "source": [
        "test_root_dir = \"C:/Users/steve/CS_7643/skin_cancer_test\"\n",
        "test_dataset = ImageFolder(root=test_root_dir, transform=base_transform)\n",
        "test_loader = DataLoader(test_dataset, batch_size=32)\n",
        "\n",
        "test_preds = []\n",
        "test_labels = []\n",
        "for x_batch, y_batch in test_loader:\n",
        "    preds = built_model.predict(x_batch)\n",
        "    test_preds.extend(preds)\n",
        "    test_labels.extend(y_batch)\n",
        "\n",
        "test_preds = np.array(test_preds)\n",
        "\n",
        "# Picked probability threshold = 0.6\n",
        "pred_labels = (test_preds >= 0.6).astype(int)\n",
        "\n",
        "acc = accuracy_score(test_labels, pred_labels)\n",
        "precision = precision_score(test_labels, pred_labels)\n",
        "recall = recall_score(test_labels, pred_labels)\n",
        "f1 = f1_score(test_labels, pred_labels)\n",
        "\n",
        "print(f\"Accuracy is {acc:.4f}\")\n",
        "print(f\"Precision is {precision:.4f}\")\n",
        "print(f\"Recall is {recall:.4f}\")\n",
        "print(f\"F1 score is {f1:.4f}\")"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.9"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}